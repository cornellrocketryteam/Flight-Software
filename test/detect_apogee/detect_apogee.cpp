/**
 * @file detect_apogee.cpp
 * @author csg83
 * 
 * @brief Unit test of the algorithm to detect apogee via an exponential weighted moving average (EWMA)
 */

#include <iostream>

float alt_ema = 310.687;
float alpha = 0.1;
int interval = 5;
int count = 0;
float filtered_alt[3] = {-1, -1, -1};

// len 134
// apogee is 332.34 at index 41
float data[] = { 310.687, 311.229, 311.771, 312.312, 312.852, 313.391, 313.93, 314.468, 315.006, 315.543, 316.079, 316.614, 317.149, 317.683, 318.217, 318.749, 319.281, 319.813, 320.343, 320.873, 321.402, 321.931, 322.459, 322.986, 323.512, 324.037, 324.562, 325.085, 325.608, 326.13, 326.652, 327.172, 327.692, 328.211, 328.729, 329.245, 329.762, 330.278, 330.794, 331.31, 331.825, 332.34, 332.855, 332.908, 337.897, 342.532, 346.295, 348.852, 350.892, 352.606, 353.982, 354.928, 355.26, 354.9, 353.968, 352.557, 350.779, 348.707, 346.419, 343.986, 341.435, 338.785, 336.112, 333.444, 330.653, 327.683, 324.596, 321.415, 318.198, 314.988, 311.735, 308.491, 305.288, 302.131, 298.981, 295.799, 292.626, 289.468, 286.314, 283.178, 280.065, 276.912, 273.698, 270.391, 267.034, 263.668, 260.272, 
256.915, 253.607, 250.28, 246.944, 243.59, 240.167, 236.735, 233.313, 229.899, 226.523, 223.14, 219.735, 216.333, 212.959, 209.623, 206.284, 202.931, 199.59, 196.321, 193.133, 190.007, 186.945, 183.861, 180.728, 177.545, 174.299, 171.064, 167.854, 164.655, 161.427, 158.082, 154.662, 151.268, 147.91, 144.611, 141.38, 138.173, 134.98, 131.768, 128.505, 125.213, 121.911, 118.607, 115.358, 112.218, 109.174, 106.136, 103.041 };

int main() {
    for (unsigned int i = 0; i < sizeof(data) / sizeof(float); i++) {
        alt_ema = alpha * data[i] + (1 - alpha) * alt_ema;
        std::cout << i << ": " << alt_ema << " (" << data[i] << ")" << std::endl;
        if (count == interval) {
            filtered_alt[2] = filtered_alt[1];
            filtered_alt[1] = filtered_alt[0];
            filtered_alt[0] = alt_ema;
            count = 0;
        }
        count++;

        if (filtered_alt[2] != -1 && filtered_alt[1] != -1 && filtered_alt[0] != -1 &&
            filtered_alt[2] > filtered_alt[1] && filtered_alt[1] > filtered_alt[0]) {
            std::cout << "APOGEE" << std::endl;
            return 0;
        }
    }

    return 0;
}